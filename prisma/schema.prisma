// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          UserRole  @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  subscriptions Subscription[]
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id String @id @default(cuid())
  name String

  subscriptions Subscription[]
  budgets Budget[]
}

model Budget {
  id String @id @default(cuid())
  amount Float
  startDate DateTime
  endDate DateTime
  categoryId String

  category Category @relation(fields: [categoryId], references: [id])
}


model Subscription {
  id String @id @default(cuid())
  userId String
  name String
  price Float
  description String?
  firstBillingDate DateTime
  reminder Boolean @default(false)
  categoryId String
  creditCardId String?

  category Category @relation(fields: [categoryId], references: [id])
  creditCard CreditCard? @relation(fields: [creditCardId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditCard {
  id String @id @default(cuid())
  nameOnCard String
  cardNumber String
  expirationDate DateTime
  userId String

  subscriptions Subscription[]
}
